--인덱스 (INDEX) - 검색 속도를 위해 메모리 상주
                -- PK/UQ 는 기본적으로 인덱스 처리됨
 
--별도로 인덱스 컬럼과 ROWID 정보를 관리하고 이 정보를 먼저 찾아 실제 테이블에 있는데이터를 검색
--테이블에 새로운 행이 입력되거나 변경 제거되면 인덱스 정보도 갱신된다.
--너무 많은 인덱스나 테이블의 데이터가 적은 경우는 성능을 저하
--PRIMARY KEY와 UNIQUE KEY는 자동으로 UNIQUEINDEX로 자동 생성

/*
    인덱스 생성을 위한 지침
    
Ø  많은 것이 항상 더 좋은 것은 아니다.
    인덱스를 가지고 있는 테이블에 대한 각 DML 작업은 인덱스도 갱신되어야 함을 의미한다.
    DML 후에 모든 인덱스를 갱신하기 위해 많은 작업을 한다
    
Ø  언제 인덱스를 생성하는가?
    - 열은 WHERE 절 또는 조인 조건에서 자주 사용한다
    - 열은 광범위한 값을 포함한다
    - 열은 많은 수의 NULL 값을 포함한다
    - 둘 또는 이상의 열은 WHERE 절 또는 조인 조건에서 자주 함께 사용한다
    - 테이블은 대형이고 대부분의 질의들은 행의 2~4%보다 적게 읽어 들일 것으로 예상한다
    
Ø  언제 인덱스를 생성해서는 안되는가?
    ` 테이블이 작다
    ` 옆이 질의의 조건으로 자주 사용되지 않는다
    ` 대부분의 질의들은 행의 2~4% 이상을 읽어 들일 것으로 예상한다
    ` 테이블은 자주 갱신한다.
*/

select rownum empno, ename, job, rowid from emp;

-- hr
select * from employees;

--속도 차이로 인해 pk키로 검색 권장
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, PHONE_NUMBER FROM EMPLOYEES
where enployee_id=100;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, PHONE_NUMBER FROM EMPLOYEES
where salary=3000;

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, PHONE_NUMBER FROM EMPLOYEES
where phone_number ='515.123.4567';

SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, PHONE_NUMBER FROM EMPLOYEES
where LAST_NAME ='king';

CREATE INDEX emp_phone_ix on employees (phone_number);

SELECT INDEX_NAME, INDEX_TYPE FROM USER_INDEXS
where table_name='EMPLOYEES';




